{"version":3,"sources":["components/Profile.js","components/Tweet.js","components/TweetBox.js","components/Uploader.js","App.js","serviceWorker.js","index.js"],"names":["Profile","props","react_default","a","createElement","className","id","src","profilePicture","alt","username","usernameShort","tweetCounter","Tweet","timestamp_default","time","timesOfTweet","autoUpdate","tweet","TweetBox","tweets","map","index","components_Tweet","key","datakey","length","timesOfTweets","Uploader","_this","this","widget","uploadcare","Widget","uploader","_this$props","value","onChange","onUploadComplete","files","onDialogOpen","dialog","reject","jQuery","when","apply","cancel","widgetElement","next","data","inputElement","remove","attributes","Object","assign","_this2","getInputAttributes","type","ref","input","Component","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tweetValue","usernameValue","handleTweetChange","bind","assertThisInitialized","handleTweetKeyDown","post","usernameInput","usernameInputKeyHandler","client","Stitch","initializeDefaultAppClient","db","getServiceClient","RemoteMongoClient","factory","user","auth","loginWithCredential","AnonymousCredential","event","setState","target","alert","toLowerCase","replace","postTweetAndUpdateDb","newTweet","newTweetTime","Date","getTime","unshift","then","collection","updateOne","owner_id","$set","upsert","catch","err","console","error","info","_this3","uuid","_this4","findOne","docs","setIntitalState","_this5","placeholder","onKeyDown","components_Profile","htmlFor","components_Uploader","name","data-tabs","file","log","progress","done","uploadPicture","components_TweetBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.960dddff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/profile.css\";\r\nconst Profile = props => {\r\n  return (\r\n    <div className='profile-flex'>\r\n      <div className='profile-image'>\r\n        <img id='profile-image' src={props.profilePicture} alt='profile' />\r\n      </div>\r\n      <div className='profile-info'>\r\n        <div>{props.username}</div>\r\n        <div>@{props.usernameShort}</div>\r\n        <div>Tweets: {props.tweetCounter}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Timestamp from \"react-timestamp\";\r\nimport \"../styles/tweet.css\";\r\n\r\nconst Tweet = props => {\r\n  return (\r\n    <li className='list-item'>\r\n      <div className='tweet-picture-container'>\r\n        <img src={props.profilePicture} alt='profile' />\r\n      </div>\r\n      <div className='tweet-content'>\r\n        <span className='tweet-username'>@{props.usernameShort} </span>\r\n        <Timestamp\r\n          className='tweet-time'\r\n          time={props.timesOfTweet}\r\n          autoUpdate\r\n        />\r\n        <p>{props.tweet}</p>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React from \"react\";\r\nimport Tweet from \"./Tweet.js\";\r\nimport \"../styles/tweetbox.css\";\r\n\r\nconst TweetBox = props => {\r\n  return (\r\n    <div className='tweetbox-container'>\r\n      <ul>\r\n        {props.tweets.map((tweet, index) => (\r\n          <Tweet\r\n            key={index}\r\n            datakey={index}\r\n            length={props.tweets.length}\r\n            tweet={tweet}\r\n            timesOfTweet={props.timesOfTweets[index]}\r\n            usernameShort={props.usernameShort}\r\n            profilePicture={props.profilePicture}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetBox;\r\n","import React, { Component } from \"react\";\r\nimport uploadcare from \"uploadcare-widget\";\r\n\r\nclass Uploader extends Component {\r\n  componentDidMount() {\r\n    const widget = uploadcare.Widget(this.uploader);\r\n    const { value, onChange, onUploadComplete } = this.props;\r\n\r\n    if (typeof value !== \"undefined\") {\r\n      widget.value(value);\r\n    }\r\n    if (typeof onChange === \"function\") {\r\n      widget.onChange(files => {\r\n        if (files) {\r\n          this.files =\r\n            this.files && this.files.files ? this.files.files() : [this.files];\r\n        } else {\r\n          this.files = null;\r\n        }\r\n\r\n        onChange(files);\r\n      });\r\n    }\r\n    if (typeof onUploadComplete === \"function\") {\r\n      widget.onUploadComplete(onUploadComplete);\r\n    }\r\n    widget.onDialogOpen(dialog => (this.dialog = dialog));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.dialog) {\r\n      this.dialog.reject();\r\n    }\r\n    if (this.files) {\r\n      uploadcare.jQuery.when.apply(null, this.files).cancel();\r\n    }\r\n\r\n    const widgetElement = uploadcare\r\n      .jQuery(this.uploader)\r\n      .next(\".uploadcare--widget\");\r\n    const widget = widgetElement.data(\"uploadcareWidget\");\r\n\r\n    if (widget && widget.inputElement === this.uploader) {\r\n      widgetElement.remove();\r\n    }\r\n  }\r\n\r\n  getInputAttributes() {\r\n    const attributes = Object.assign({}, this.props);\r\n\r\n    delete attributes.value;\r\n    delete attributes.onChange;\r\n    delete attributes.onUploadComplete;\r\n\r\n    return attributes;\r\n  }\r\n\r\n  render() {\r\n    const attributes = this.getInputAttributes();\r\n\r\n    return (\r\n      <input\r\n        type='hidden'\r\n        ref={input => (this.uploader = input)}\r\n        {...attributes}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Uploader;\r\n","import React, { Component } from \"react\";\r\nimport Profile from \"./components/Profile.js\";\r\nimport TweetBox from \"./components/TweetBox.js\";\r\nimport Uploader from \"./components/Uploader\";\r\nimport {\r\n  Stitch,\r\n  RemoteMongoClient,\r\n  AnonymousCredential\r\n} from \"mongodb-stitch-browser-sdk\";\r\nimport \"./styles/app.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleTweetChange = this.handleTweetChange.bind(this);\r\n    this.handleTweetKeyDown = this.handleTweetKeyDown.bind(this);\r\n    this.post = this.post.bind(this);\r\n    this.usernameInput = this.usernameInput.bind(this);\r\n    this.usernameInputKeyHandler = this.usernameInputKeyHandler.bind(this);\r\n    this.client = Stitch.initializeDefaultAppClient(\"twitter-clone-hgeer\");\r\n    this.db = this.client\r\n      .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\r\n      .db(\"twitter-clone\");\r\n    this.user = this.client.auth.loginWithCredential(new AnonymousCredential());\r\n  }\r\n\r\n  state = {\r\n    profilePicture: \"logo.png\",\r\n    username: \"\",\r\n    usernameShort: \"\",\r\n    tweets: [],\r\n    timesOfTweets: [],\r\n    tweetValue: \"\",\r\n    usernameValue: \"\",\r\n    tweetCounter: 0\r\n  };\r\n\r\n  usernameInput(event) {\r\n    this.setState({\r\n      usernameValue: event.target.value\r\n    });\r\n  }\r\n  usernameInputKeyHandler(event) {\r\n    if (event.key === \"Enter\") {\r\n      if (!event.target.value) {\r\n        alert(\"name can't be empty\");\r\n      }\r\n      this.setState({\r\n        username: this.state.usernameValue,\r\n        usernameShort: this.state.usernameValue.toLowerCase().replace(/\\s/g, \"\")\r\n      });\r\n      this.postTweetAndUpdateDb();\r\n    }\r\n  }\r\n\r\n  handleTweetChange(event) {\r\n    this.setState({\r\n      tweetValue: event.target.value\r\n    });\r\n  }\r\n  handleTweetKeyDown(event) {\r\n    if (event.key === \"Enter\") {\r\n      this.post();\r\n    }\r\n  }\r\n  post() {\r\n    if (this.state.tweetValue !== \"\") {\r\n      let newTweet = this.state.tweets;\r\n      let newTweetTime = this.state.timesOfTweets;\r\n      let date = new Date();\r\n      let time = date.getTime() / 1000;\r\n      newTweetTime.unshift(time);\r\n      newTweet.unshift(this.state.tweetValue);\r\n      this.setState({\r\n        tweets: newTweet,\r\n        timesOfTweets: newTweetTime,\r\n        tweetCounter: this.state.tweets.length,\r\n        tweetValue: \"\"\r\n      });\r\n      this.postTweetAndUpdateDb();\r\n    }\r\n  }\r\n  postTweetAndUpdateDb() {\r\n    this.user.then(user =>\r\n      this.db\r\n        .collection(\"users\")\r\n        .updateOne(\r\n          { owner_id: this.client.auth.user.id },\r\n          {\r\n            $set: {\r\n              profilePicture: this.state.profilePicture,\r\n              username: this.state.username,\r\n              usernameShort: this.state.usernameShort,\r\n              tweets: this.state.tweets,\r\n              timesOfTweets: this.state.timesOfTweets,\r\n              tweetCounter: this.state.tweetCounter\r\n            }\r\n          },\r\n          { upsert: true }\r\n        )\r\n        .catch(err => {\r\n          console.error(err);\r\n        })\r\n    );\r\n  }\r\n  uploadPicture(info) {\r\n    this.user.then(user =>\r\n      this.db\r\n        .collection(\"users\")\r\n        .updateOne(\r\n          { owner_id: this.client.auth.user.id },\r\n          {\r\n            $set: {\r\n              profilePicture:\r\n                \"https://ucarecdn.com/\" + info.uuid + \"/-/resize/150x/\"\r\n            }\r\n          },\r\n          this.setState({\r\n            profilePicture:\r\n              \"https://ucarecdn.com/\" + info.uuid + \"/-/resize/150x/\"\r\n          }),\r\n          { upsert: true }\r\n        )\r\n        .catch(err => {\r\n          console.error(err);\r\n        })\r\n    );\r\n  }\r\n  setIntitalState() {\r\n    this.user\r\n      .then(() =>\r\n        this.db\r\n          .collection(\"users\")\r\n          .findOne({ owner_id: this.client.auth.user.id })\r\n      )\r\n      .then(docs => {\r\n        if (docs) {\r\n          this.setState({\r\n            profilePicture: docs.profilePicture || \"logo.png\",\r\n            tweetCounter: docs.tweetCounter,\r\n            tweets: docs.tweets,\r\n            timesOfTweets: docs.timesOfTweets,\r\n            username: docs.username,\r\n            usernameShort: docs.usernameShort\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setIntitalState();\r\n  }\r\n  render() {\r\n    if (this.state.username === \"\") {\r\n      return (\r\n        <div className='login-container animation'>\r\n          <div className='logo-container'>\r\n            <img src='logo.png' alt='logo' />\r\n          </div>\r\n          <p>\r\n            Welcome to Twudder (like a twitter, but with no annoying tweets)\r\n          </p>\r\n          <input\r\n            id='username-input'\r\n            type='text'\r\n            placeholder='Please enter your name and press Enter'\r\n            value={this.state.usernameValue}\r\n            onChange={this.usernameInput}\r\n            onKeyDown={this.usernameInputKeyHandler}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className='container'>\r\n          <div className='profile-container'>\r\n            <Profile\r\n              profilePicture={this.state.profilePicture}\r\n              username={this.state.username}\r\n              usernameShort={this.state.usernameShort}\r\n              tweetCounter={this.state.tweetCounter}\r\n            />\r\n            <div className='uploader'>\r\n              <label htmlFor='file'>Change Picture:</label>{\" \"}\r\n              <Uploader\r\n                id='file'\r\n                name='file'\r\n                data-tabs='file camera'\r\n                onChange={file => {\r\n                  console.log(\"File changed: \", file);\r\n                  if (file) {\r\n                    file.progress(info =>\r\n                      console.log(\"File progress: \", info.progress)\r\n                    );\r\n                    file.done(info => console.log(\"File uploaded: \", info));\r\n                  }\r\n                }}\r\n                onUploadComplete={info => this.uploadPicture(info)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='tweets-container'>\r\n            <div className='post-container'>\r\n              <input\r\n                id='post'\r\n                type='text'\r\n                placeholder='Please enter your tweet and press Enter'\r\n                value={this.state.tweetValue}\r\n                onChange={this.handleTweetChange}\r\n                onKeyDown={this.handleTweetKeyDown}\r\n              />\r\n            </div>\r\n            <TweetBox\r\n              tweets={this.state.tweets}\r\n              timesOfTweets={this.state.timesOfTweets}\r\n              usernameShort={this.state.usernameShort}\r\n              profilePicture={this.state.profilePicture}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}