{"version":3,"sources":["components/Profile.js","components/Comments.js","components/Tweet.js","components/TweetBox.js","components/Uploader.js","components/NewTweetBox.js","components/SearchItems.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["Profile","props","react_default","a","createElement","className","id","src","profilePicture","alt","username","usernameShort","tweetCounter","Comments","comment","library","add","faEyeSlash","faComments","Tweet","comments","useEffect","formated","tweet","length","split","setComment","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","commentsOpen","setCommentsOpen","_useState5","_useState6","inputValue","setInputValue","Fragment","timestamp_default","time","timesOfTweet","autoUpdate","type","placeholder","value","onChange","event","target","onKeyDown","keyCode","onClick","react_fontawesome_index_es","icon","size","map","index","key","components_Comments","TweetBox","tweets","components_Tweet","datakey","timesOfTweets","owner_id","Uploader","_this","this","widget","uploadcare","Widget","uploader","_this$props","onUploadComplete","files","onDialogOpen","dialog","reject","jQuery","when","apply","cancel","widgetElement","next","data","inputElement","remove","attributes","assign","_this2","getInputAttributes","ref","input","Component","newTimesSorted","NewTweetBox","array","timesSorted","push","item","times","sort","b","toLowerCase","replace","SearchItems","following","setFollowing","i","checkIfFollowing","unfollow","follow","SearchResults","searchResultsArray","components_SearchItems","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tweetValue","usernameValue","search","searchEmpty","home","usernameInput","bind","assertThisInitialized","usernameInputKeyHandler","handleTweetChange","handleTweetKeyDown","post","updateDb","uploadPicture","getSearch","clearSearch","searchResults","setIntitalState","checkForChanges","checkForOwnChanges","client","Stitch","initializeDefaultAppClient","db","getServiceClient","RemoteMongoClient","factory","user","auth","loginWithCredential","AnonymousCredential","setState","alert","newTweet","newTweetTime","Date","getTime","unshift","collection","updateOne","$set","upsert","catch","err","console","error","info","uuid","arg","find","RegExp","toArray","then","results","toConsumableArray","newFollowing","filter","el","_this3","findOne","docs","_this4","log","indexOf","_this5","list","$in","resultsSorted","followingSorted","j","_this6","_this7","interval","setInterval","selfInterval","prevProps","prevState","clearInterval","_this8","htmlFor","components_SearchResults","components_Profile","components_Uploader","name","data-tabs","file","progress","done","components_TweetBox","components_NewTweetBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b097494.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/profile.css\";\r\nconst Profile = props => {\r\n  return (\r\n    <div className='profile-flex'>\r\n      <div className='profile-image'>\r\n        <img id='profile-image' src={props.profilePicture} alt='profile' />\r\n      </div>\r\n      <div className='profile-info'>\r\n        <div>{props.username}</div>\r\n        <div>{props.usernameShort}</div>\r\n        <div>Tweets: {props.tweetCounter}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\n\r\nconst Comments = props => {\r\n  return <p>{props.comment}</p>;\r\n};\r\n\r\nexport default Comments;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Timestamp from \"react-timestamp\";\r\nimport Comments from \"./Comments.js\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEyeSlash, faComments } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../styles/tweet.css\";\r\nlibrary.add(faEyeSlash, faComments);\r\nconst Tweet = props => {\r\n  let comments = [];\r\n  useEffect(() => {\r\n    let formated = [];\r\n    formated[0] = props.tweet;\r\n    if (formated[0].length === 1) {\r\n      comments = formated[0][0].split(\"&?\");\r\n    } else {\r\n      comments = formated[0].split(\"&?\");\r\n    }\r\n    setComment(comments);\r\n  }, [props.tweet]);\r\n  const [comment, setComment] = useState([]);\r\n  const [commentsOpen, setCommentsOpen] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <li className='list-item'>\r\n        <div className='tweet-picture-container'>\r\n          <img src={props.profilePicture} alt='profile' />\r\n        </div>\r\n        <div className='tweet-content'>\r\n          <span className='tweet-username'>{props.usernameShort}</span>\r\n          <Timestamp\r\n            className='tweet-time'\r\n            time={props.timesOfTweet}\r\n            autoUpdate\r\n          />\r\n          <p>{comment[0]}</p>\r\n        </div>\r\n      </li>\r\n      <div className='comments-input'>\r\n        {commentsOpen ? (\r\n          <React.Fragment>\r\n            <input\r\n              type='text'\r\n              placeholder='Please enter you comment and press Enter'\r\n              className='comments-input-open'\r\n              value={inputValue}\r\n              onChange={handleChange}\r\n              onKeyDown={event =>\r\n                props.comment(props, inputValue, event.keyCode)\r\n              }\r\n            />\r\n            <button\r\n              className='open-comments-button --opened-comments'\r\n              onClick={() => setCommentsOpen(!commentsOpen)}\r\n            >\r\n              <FontAwesomeIcon icon='eye-slash' size='lg' />\r\n            </button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <React.Fragment>\r\n            <input placeholder='Comment' className='comments-input-closed' />\r\n            <button\r\n              className='open-comments-button --closed-comments'\r\n              onClick={() => setCommentsOpen(!commentsOpen)}\r\n            >\r\n              <FontAwesomeIcon icon='comments' size='lg' />\r\n            </button>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        className={\r\n          commentsOpen ? \"comments comments-open\" : \"comments comments-closed\"\r\n        }\r\n      >\r\n        {comment.map((comment, index) =>\r\n          index === 0 ? null : (\r\n            <div key={index}>\r\n              <Comments comment={comment} />\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React from \"react\";\r\nimport Tweet from \"./Tweet.js\";\r\nimport \"../styles/tweetbox.css\";\r\n\r\nconst TweetBox = props => {\r\n  return (\r\n    <div className='tweetbox-container'>\r\n      <ul>\r\n        {props.tweets.map((tweet, index) => (\r\n          <Tweet\r\n            key={index}\r\n            datakey={index}\r\n            length={props.tweets.length}\r\n            tweet={tweet}\r\n            timesOfTweet={props.timesOfTweets[index]}\r\n            usernameShort={props.usernameShort}\r\n            profilePicture={props.profilePicture}\r\n            comment={props.comment}\r\n            owner_id={props.owner_id}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetBox;\r\n","import React, { Component } from \"react\";\r\nimport uploadcare from \"uploadcare-widget\";\r\n\r\nclass Uploader extends Component {\r\n  componentDidMount() {\r\n    const widget = uploadcare.Widget(this.uploader);\r\n    const { value, onChange, onUploadComplete } = this.props;\r\n\r\n    if (typeof value !== \"undefined\") {\r\n      widget.value(value);\r\n    }\r\n    if (typeof onChange === \"function\") {\r\n      widget.onChange(files => {\r\n        if (files) {\r\n          this.files =\r\n            this.files && this.files.files ? this.files.files() : [this.files];\r\n        } else {\r\n          this.files = null;\r\n        }\r\n\r\n        onChange(files);\r\n      });\r\n    }\r\n    if (typeof onUploadComplete === \"function\") {\r\n      widget.onUploadComplete(onUploadComplete);\r\n    }\r\n    widget.onDialogOpen(dialog => (this.dialog = dialog));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.dialog) {\r\n      this.dialog.reject();\r\n    }\r\n    if (this.files) {\r\n      uploadcare.jQuery.when.apply(null, this.files).cancel();\r\n    }\r\n\r\n    const widgetElement = uploadcare\r\n      .jQuery(this.uploader)\r\n      .next(\".uploadcare--widget\");\r\n    const widget = widgetElement.data(\"uploadcareWidget\");\r\n\r\n    if (widget && widget.inputElement === this.uploader) {\r\n      widgetElement.remove();\r\n    }\r\n  }\r\n\r\n  getInputAttributes() {\r\n    const attributes = Object.assign({}, this.props);\r\n\r\n    delete attributes.value;\r\n    delete attributes.onChange;\r\n    delete attributes.onUploadComplete;\r\n\r\n    return attributes;\r\n  }\r\n\r\n  render() {\r\n    const attributes = this.getInputAttributes();\r\n\r\n    return (\r\n      <input\r\n        type='hidden'\r\n        ref={input => (this.uploader = input)}\r\n        {...attributes}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Uploader;\r\n","import React from \"react\";\r\nimport Tweet from \"./Tweet.js\";\r\nimport \"../styles/tweetbox.css\";\r\nlet newTimesSorted = [];\r\n\r\nconst NewTweetBox = props => {\r\n  const sort = () => {\r\n    let array = [];\r\n    let timesSorted = [];\r\n    array.push(props.tweets);\r\n    array.map(item => {\r\n      item.map(times => {\r\n        times.timesOfTweets.map((timesOfTweets, index) => {\r\n          timesSorted.push([\r\n            timesOfTweets,\r\n            times.tweets[index],\r\n            times.username,\r\n            times.profilePicture,\r\n            times.owner_id\r\n          ]);\r\n          return (newTimesSorted = timesSorted.sort(function(a, b) {\r\n            return b[0] - a[0];\r\n          }));\r\n        });\r\n        return null;\r\n      });\r\n      return null;\r\n    });\r\n  };\r\n  sort();\r\n\r\n  if (props.tweets.length !== 0) {\r\n    return (\r\n      <div className='tweetbox-container'>\r\n        <ul>\r\n          {newTimesSorted.map((item, index) => (\r\n            <Tweet\r\n              datakey={index}\r\n              key={index}\r\n              usernameShort={\"@\" + item[2].toLowerCase().replace(/\\s/g, \"\")}\r\n              timesOfTweet={item[0]}\r\n              profilePicture={item[3]}\r\n              tweet={item[1]}\r\n              comment={props.comment}\r\n              owner_id={item[4]}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default NewTweetBox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/searchitems.css\";\r\n\r\nconst SearchItems = props => {\r\n  const [following, setFollowing] = useState(false);\r\n\r\n  function checkIfFollowing() {\r\n    for (let i = 0; i < props.following.length; i++) {\r\n      if (props.id === props.following[i].owner_id) {\r\n        setFollowing(true);\r\n        break;\r\n      } else setFollowing(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfFollowing();\r\n  }, [props.item]);\r\n\r\n  return (\r\n    <div className='search-item-with-button'>\r\n      <div className='search-item-container'>\r\n        <img\r\n          className='search-item-img'\r\n          src={props.item.profilePicture}\r\n          alt='profile'\r\n        />\r\n        <div className='search-item-username'>\r\n          <p>{props.item.username}</p>\r\n          <p>{\"@\" + props.item.username.toLowerCase().replace(/\\s/g, \"\")}</p>\r\n          <p>Tweets: {props.item.tweets.length}</p>\r\n        </div>\r\n      </div>\r\n      {following ? (\r\n        <button\r\n          className='unfollow'\r\n          onClick={() => {\r\n            props.unfollow(props.item);\r\n            setFollowing(false);\r\n          }}\r\n        >\r\n          Unfollow\r\n        </button>\r\n      ) : (\r\n        <button\r\n          className='follow'\r\n          onClick={() => {\r\n            props.follow(props.item);\r\n            setFollowing(true);\r\n          }}\r\n        >\r\n          Follow\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchItems;\r\n","import React from \"react\";\r\nimport SearchItems from \"./SearchItems.js\";\r\nimport \"../styles/searchresults.css\";\r\n\r\nconst SearchResults = props => {\r\n  return (\r\n    <ul className='search-list'>\r\n      {props.searchResultsArray.map((item, index) => (\r\n        <li className='search-list-item' key={index}>\r\n          <SearchItems\r\n            item={item}\r\n            id={item.owner_id}\r\n            follow={props.follow}\r\n            unfollow={props.unfollow}\r\n            following={props.following}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from \"react\";\r\nimport Profile from \"./components/Profile.js\";\r\nimport TweetBox from \"./components/TweetBox.js\";\r\nimport Uploader from \"./components/Uploader\";\r\nimport NewTweetBox from \"./components/NewTweetBox.js\";\r\nimport SearchResults from \"./components/SearchResults.js\";\r\n\r\nimport {\r\n  Stitch,\r\n  RemoteMongoClient,\r\n  AnonymousCredential\r\n} from \"mongodb-stitch-browser-sdk\";\r\nimport \"./styles/app.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.usernameInput = this.usernameInput.bind(this);\r\n    this.usernameInputKeyHandler = this.usernameInputKeyHandler.bind(this);\r\n    this.handleTweetChange = this.handleTweetChange.bind(this);\r\n    this.handleTweetKeyDown = this.handleTweetKeyDown.bind(this);\r\n    this.post = this.post.bind(this);\r\n    this.updateDb = this.updateDb.bind(this);\r\n    this.uploadPicture = this.uploadPicture.bind(this);\r\n    this.getSearch = this.getSearch.bind(this);\r\n    this.clearSearch = this.clearSearch.bind(this);\r\n    this.searchResults = this.searchResults.bind(this);\r\n    this.follow = this.follow.bind(this);\r\n    this.unfollow = this.unfollow.bind(this);\r\n    this.setIntitalState = this.setIntitalState.bind(this);\r\n    this.comment = this.comment.bind(this);\r\n    this.checkForChanges = this.checkForChanges.bind(this);\r\n    this.checkForOwnChanges = this.checkForOwnChanges.bind(this);\r\n    this.client = Stitch.initializeDefaultAppClient(\"twitter-clone-hgeer\");\r\n    this.db = this.client\r\n      .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\r\n      .db(\"twitter-clone\");\r\n    this.user = this.client.auth.loginWithCredential(new AnonymousCredential());\r\n  }\r\n  state = {\r\n    profilePicture: \"logo.png\",\r\n    username: \"\",\r\n    timesOfTweets: [],\r\n    tweets: [],\r\n    tweetValue: \"\",\r\n    usernameValue: \"\",\r\n    search: \"\",\r\n    searchEmpty: true,\r\n    searchResultsArray: [],\r\n    following: [],\r\n    home: true,\r\n    owner_id: \"\"\r\n  };\r\n\r\n  usernameInput(event) {\r\n    this.setState({\r\n      usernameValue: event.target.value\r\n    });\r\n  }\r\n  usernameInputKeyHandler(event) {\r\n    if (event.key === \"Enter\") {\r\n      if (!event.target.value) {\r\n        alert(\"name can't be empty\");\r\n      }\r\n      this.setState({\r\n        username: this.state.usernameValue\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTweetChange(event) {\r\n    this.setState({\r\n      tweetValue: event.target.value\r\n    });\r\n  }\r\n  handleTweetKeyDown(event) {\r\n    if (event.key === \"Enter\") {\r\n      this.post();\r\n    }\r\n  }\r\n  post() {\r\n    if (this.state.tweetValue !== \"\") {\r\n      let newTweet = this.state.tweets;\r\n      let newTweetTime = this.state.timesOfTweets;\r\n      let date = new Date();\r\n      let time = date.getTime() / 1000;\r\n      newTweetTime.unshift(time);\r\n      newTweet.unshift(this.state.tweetValue);\r\n      this.setState({\r\n        tweets: newTweet,\r\n        timesOfTweets: newTweetTime,\r\n        tweetValue: \"\"\r\n      });\r\n      this.updateDb();\r\n    }\r\n  }\r\n  updateDb() {\r\n    this.db\r\n      .collection(\"users\")\r\n      .updateOne(\r\n        { owner_id: this.client.auth.user.id },\r\n        {\r\n          $set: {\r\n            profilePicture: this.state.profilePicture,\r\n            username: this.state.usernameValue || this.state.username,\r\n            tweets: this.state.tweets,\r\n            timesOfTweets: this.state.timesOfTweets,\r\n            following: this.state.following\r\n          }\r\n        },\r\n        { upsert: true }\r\n      )\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  uploadPicture(info) {\r\n    this.db\r\n      .collection(\"users\")\r\n      .updateOne(\r\n        { owner_id: this.client.auth.user.id },\r\n        {\r\n          $set: {\r\n            profilePicture:\r\n              \"https://ucarecdn.com/\" + info.uuid + \"/-/resize/150x/\"\r\n          }\r\n        },\r\n        this.setState({\r\n          profilePicture:\r\n            \"https://ucarecdn.com/\" + info.uuid + \"/-/resize/150x/\"\r\n        }),\r\n        { upsert: true }\r\n      )\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  getSearch(event) {\r\n    if (event.target.value !== \"\") {\r\n      this.setState({\r\n        searchEmpty: false\r\n      });\r\n      this.searchResults(event.target.value);\r\n    } else {\r\n      this.setState({\r\n        searchEmpty: true\r\n      });\r\n    }\r\n    this.setState({\r\n      search: event.target.value\r\n    });\r\n  }\r\n  clearSearch() {\r\n    this.setState({\r\n      searchEmpty: true,\r\n      search: \"\"\r\n    });\r\n  }\r\n  searchResults(arg) {\r\n    this.db\r\n      .collection(\"users\")\r\n      .find({ username: new RegExp(arg) })\r\n      .toArray()\r\n      .then(results => {\r\n        if (results.length > 0) {\r\n          this.setState({\r\n            searchResultsArray: [...results]\r\n          });\r\n        }\r\n      });\r\n  }\r\n  follow(item) {\r\n    let newFollowing = this.state.following;\r\n    newFollowing.push(item);\r\n    this.setState({\r\n      following: [...newFollowing]\r\n    });\r\n  }\r\n  unfollow(item) {\r\n    let newFollowing = this.state.following.filter(function(el) {\r\n      return el.owner_id !== item.owner_id;\r\n    });\r\n    if (newFollowing.length === 0) {\r\n      this.setState({\r\n        following: []\r\n      });\r\n    }\r\n    this.setState({\r\n      following: [...newFollowing]\r\n    });\r\n  }\r\n  setIntitalState() {\r\n    this.user\r\n      .then(() =>\r\n        this.db\r\n          .collection(\"users\")\r\n          .findOne({ owner_id: this.client.auth.user.id })\r\n      )\r\n      .then(docs => {\r\n        if (docs) {\r\n          this.setState({\r\n            profilePicture: docs.profilePicture || \"logo.png\",\r\n            tweets: docs.tweets,\r\n            timesOfTweets: docs.timesOfTweets,\r\n            username: docs.username,\r\n            following: docs.following || [],\r\n            owner_id: docs.owner_id\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  comment(item, value, key) {\r\n    console.log(item, value, key);\r\n    if (key === 13) {\r\n      console.log(\"Enter pressed\");\r\n      this.user\r\n        .then(() =>\r\n          this.db.collection(\"users\").findOne({ owner_id: item.owner_id })\r\n        )\r\n        .then(docs => {\r\n          let index = docs.timesOfTweets.indexOf(item.timesOfTweet);\r\n          console.log(index);\r\n          let tweets = docs.tweets;\r\n          tweets[index] =\r\n            tweets[index] +\r\n            \"&?\" +\r\n            value +\r\n            \" :\" +\r\n            \"@\" +\r\n            this.state.username.toLowerCase().replace(/\\s/g, \"\");\r\n          console.log(tweets);\r\n          this.checkForChanges();\r\n          this.db\r\n            .collection(\"users\")\r\n            .updateOne(\r\n              { owner_id: item.owner_id },\r\n              {\r\n                $set: {\r\n                  tweets: tweets\r\n                }\r\n              },\r\n              { upsert: true }\r\n            )\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n          if (item.owner_id === this.client.auth.user.id) {\r\n            this.setState({\r\n              tweets: tweets\r\n            });\r\n          } else {\r\n            this.checkForChanges();\r\n            this.updateDb();\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n        });\r\n    }\r\n  }\r\n  checkForChanges() {\r\n    let list = [];\r\n    for (let i = 0; i < this.state.following.length; i++) {\r\n      list.push(this.state.following[i].owner_id);\r\n    }\r\n    this.db\r\n      .collection(\"users\")\r\n      .find({\r\n        owner_id: {\r\n          $in: list\r\n        }\r\n      })\r\n      .toArray()\r\n      .then(results => {\r\n        let resultsSorted = results.sort((a, b) =>\r\n          a.owner_id > b.owner_id ? 1 : b.owner_id > a.owner_id ? -1 : 0\r\n        );\r\n        let followingSorted = this.state.following.sort((a, b) =>\r\n          a.owner_id > b.owner_id ? 1 : b.owner_id > a.owner_id ? -1 : 0\r\n        );\r\n        for (let i = 0; i < followingSorted.length; i++) {\r\n          for (let j = 0; j < resultsSorted[i].tweets.length; j++) {\r\n            if (resultsSorted[i].tweets[j] !== followingSorted[i].tweets[j]) {\r\n              this.setState({\r\n                following: resultsSorted\r\n              });\r\n              console.log(\"change in following\");\r\n            }\r\n          }\r\n        }\r\n      });\r\n  }\r\n  checkForOwnChanges() {\r\n    this.user\r\n      .then(() =>\r\n        this.db\r\n          .collection(\"users\")\r\n          .findOne({ owner_id: this.client.auth.user.id })\r\n      )\r\n      .then(docs => {\r\n        for (let i = 0; i < docs.tweets.length; i++) {\r\n          if (docs.tweets[i] !== this.state.tweets[i]) {\r\n            console.log(\r\n              \"base: \",\r\n              docs.tweets[i],\r\n              \"state: \",\r\n              this.state.tweets[i]\r\n            );\r\n            this.setState({\r\n              tweets: docs.tweets\r\n            });\r\n          } else break;\r\n        }\r\n      })\r\n\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  componentDidMount() {\r\n    this.setIntitalState();\r\n    this.interval = setInterval(() => this.checkForChanges(), 1000);\r\n    this.selfInterval = setInterval(() => this.checkForOwnChanges(), 1000);\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.state.profilePicture !== prevState.profilePicture ||\r\n      this.state.tweets !== prevState.tweets ||\r\n      this.state.username !== prevState.username ||\r\n      this.state.following !== prevState.following ||\r\n      this.state.home !== prevState.home\r\n    ) {\r\n      this.checkForChanges();\r\n      this.updateDb();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  render() {\r\n    if (this.state.username === \"\") {\r\n      return (\r\n        <div className='login-container animation'>\r\n          <div className='logo-container'>\r\n            <img src='logo.png' alt='logo' />\r\n          </div>\r\n          <p>\r\n            Welcome to Twudder (like a twitter, but with no annoying tweets)\r\n          </p>\r\n          <div className='username-input-container'>\r\n            <input\r\n              id='username-input'\r\n              type='text'\r\n              value={this.state.usernameValue}\r\n              onChange={this.usernameInput}\r\n              onKeyDown={this.usernameInputKeyHandler}\r\n            />\r\n            <label className='username-input-label' htmlFor='username-input'>\r\n              Please enter your name and press Enter\r\n            </label>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <div className='search-container'>\r\n            <div className='search-input-container'>\r\n              <input\r\n                id='search'\r\n                type='text'\r\n                value={this.state.search}\r\n                onChange={this.getSearch}\r\n                placeholder='Search...'\r\n              />\r\n              <button onClick={this.clearSearch}>Clear</button>\r\n            </div>\r\n            {!this.state.searchEmpty ? (\r\n              <SearchResults\r\n                searchResultsArray={this.state.searchResultsArray}\r\n                following={this.state.following}\r\n                follow={this.follow}\r\n                unfollow={this.unfollow}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className='container'>\r\n            <div className='profile-container'>\r\n              <Profile\r\n                profilePicture={this.state.profilePicture}\r\n                username={this.state.username}\r\n                usernameShort={\r\n                  \"@\" + this.state.username.toLowerCase().replace(/\\s/g, \"\")\r\n                }\r\n                tweetCounter={this.state.tweets.length}\r\n              />\r\n              <div className='uploader'>\r\n                <label htmlFor='file'>Change Picture:</label>{\" \"}\r\n                <Uploader\r\n                  id='file'\r\n                  name='file'\r\n                  data-tabs='file camera'\r\n                  onChange={file => {\r\n                    console.log(\"File changed: \", file);\r\n                    if (file) {\r\n                      file.progress(info =>\r\n                        console.log(\"File progress: \", info.progress)\r\n                      );\r\n                      file.done(info => console.log(\"File uploaded: \", info));\r\n                    }\r\n                  }}\r\n                  onUploadComplete={info => this.uploadPicture(info)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='buttons-and-tweets'>\r\n              <div className='buttons-container'>\r\n                <button\r\n                  className={this.state.home ? \"button --active\" : \"button\"}\r\n                  onClick={() => this.setState({ home: true })}\r\n                >\r\n                  Home\r\n                </button>\r\n                <button\r\n                  className={this.state.home ? \"button\" : \"button --active\"}\r\n                  onClick={() => this.setState({ home: false })}\r\n                >\r\n                  Feed\r\n                </button>\r\n              </div>\r\n              <div className='tweets-container'>\r\n                {this.state.home ? (\r\n                  <div className='post-container'>\r\n                    <input\r\n                      id='post'\r\n                      type='text'\r\n                      value={this.state.tweetValue}\r\n                      onChange={this.handleTweetChange}\r\n                      onKeyDown={this.handleTweetKeyDown}\r\n                    />\r\n                    <label className='post-label' htmlFor='post'>\r\n                      Please enter your tweet and press Enter\r\n                    </label>\r\n                  </div>\r\n                ) : null}\r\n\r\n                {this.state.home ? (\r\n                  <TweetBox\r\n                    tweets={this.state.tweets}\r\n                    timesOfTweets={this.state.timesOfTweets}\r\n                    profilePicture={this.state.profilePicture}\r\n                    usernameShort={\r\n                      \"@\" + this.state.username.toLowerCase().replace(/\\s/g, \"\")\r\n                    }\r\n                    comment={this.comment}\r\n                    owner_id={this.state.owner_id}\r\n                  />\r\n                ) : (\r\n                  <NewTweetBox\r\n                    tweets={this.state.following}\r\n                    comment={this.comment}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}